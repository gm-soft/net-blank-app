stages:
  - backend test
  - frontend test
  - docker build
  - deploy

backend test:
  stage: backend test
  image: mcr.microsoft.com/dotnet/sdk:5.0
  only:
    - merge_requests
    - master
  variables:
    SOLUTION_FILE: "./src/NetBlankApp.sln"
  cache:
    key: "build_dependency_dotnet"
    paths:
      - nuget/
  before_script:
    - "dotnet restore $SOLUTION_FILE"
  script:
    - dotnet build $SOLUTION_FILE --configuration Release
    - echo !!!Build finished
    - dotnet test $SOLUTION_FILE

# TODO Maxim: remove copypaste
# Build steps
frontend test:
  stage: frontend test
  image: node:latest
  cache:
    key: "build_dependency_node"
    paths:
      - src/PC.Frontend/node_modules/
  only:
    - merge_requests
    - master
  script:
    # install dependencies to use chrome w/ puppeteer
    - apt update && apt install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd ./src/PC.Frontend/
    - npm set progress=false
    - npm install --no-optional
    - npm run lint
    - npm run build-stage
    - npm run test-headless-ci-only

docker build:
  stage: docker build
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/promo:$CI_PIPELINE_IID
  before_script:
    - "cd ./src"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - master

deploy:
  stage: deploy
  image: docker/compose:latest
  services:
    - docker:dind
  before_script:
    - "cd ."
  script:
    - docker-compose up -d
  only:
    - master
  when: manual
