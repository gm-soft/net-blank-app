using System;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;
using Swashbuckle.AspNetCore.SwaggerUI;

namespace Company.Core.Api.Config
{
    public static class SwaggerConfig
    {
        private const string Name = "Company Core API";

        private const string Version = "v1";

        private static string Endpoint => $"/swagger/{Version}/swagger.json";

        private const string UIEndpoint = "";

        public static void SwaggerUIConfig(SwaggerUIOptions config)
        {
            config.RoutePrefix = UIEndpoint;
            config.SwaggerEndpoint(Endpoint, Name);
        }

        public static void SwaggerGenConfig(SwaggerGenOptions config)
        {
            config.SwaggerDoc(Version, new OpenApiInfo { Title = Name, Version = Version });

            // copied from https://stackoverflow.com/a/58972781
            config.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
            {
                Description = @"JWT Authorization header using the Bearer scheme.",
                Name = "Authorization",
                In = ParameterLocation.Header,
                Type = SecuritySchemeType.ApiKey,
                Scheme = "Bearer"
            });

            config.AddSecurityRequirement(new OpenApiSecurityRequirement()
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer"
                        },
                        Scheme = "oauth2",
                        Name = "Bearer",
                        In = ParameterLocation.Header
                    },
                    Array.Empty<string>()
                }
            });

            // Locate the XML file being generated by ASP.NET...
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

            if (File.Exists(xmlPath))
            {
                // ... and tell Swagger to use those XML comments.
                config.IncludeXmlComments(xmlPath);
            }
        }
    }
}